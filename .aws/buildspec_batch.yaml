
version: 0.2
env:
  shell: /bin/bash
  variables:
    USE_EPOCH: 1
    PUBLIC_REGISTRY: public.ecr.aws/ews-network/
    DOCKER_CLI_EXPERIMENTAL: enabled
    RUNTIME_NAME: amazoncorretto

batch:
  fast-fail: true
  build-graph:
    - identifier: amd64
      env:
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
        variables:
          ARCH: amd64
      buildspec: .codebuild/buildspec.yaml

    - identifier: arm64v8
      env:
        type: ARM_CONTAINER
        image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
        variables:
          ARCH: arm64v8
      buildspec: .codebuild/buildspec.yaml

    - identifier: manifest
      env:
        compute-type: BUILD_GENERAL1_LARGE
        privileged-mode: true
      depend-on:
        - amd64
        - arm64v8

phases:
  install:
    commands:
      - if [ -z ${AWS_ACCOUNT_ID+x} ]; then AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account); fi
      - REGISTRY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION:-$AWS_DEFAULT_REGION}.amazonaws.com/
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${REGISTRY_URI}
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_REGISTRY}

  build:
    commands:
      - mkdir manifests
      - |
          for file in `find /codebuild/output/ -name "*.images.manifest" -type f -exec basename {} \; | sort | uniq`; do
            for manifest in `find /codebuild/output/ -name $file `; do
              cat $manifest >> manifests/$file ;
            done ;
          done
      - ls -lh manifests
      - |
          for manifest in `find manifests -name "*images.manifest" -type f`; do
            ./bin/create_manifest.sh $manifest
          done

    finally:
      - rm -rfv ~/.docker
